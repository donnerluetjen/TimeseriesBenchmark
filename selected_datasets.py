dataset_domains = {
    # datasets from UEA archive (multivariate)
    # "ArticularyWordRecognition": "MOTION",
    # "AtrialFibrillation": "ECG",
    # "BasicMotions": "HAR",
    # "Epilepsy": "HAR",
    # "EyesOpenShut": "EEG",
    "FingerMovements": "EEG",
    "HandMovementDirection": "EEG",
    "Libras": "HAR",
    "NATOPS": "HAR",
    "RacketSports": "HAR",
    "SelfRegulationSCP1": "EEG",
    "SelfRegulationSCP2": "EEG",
    "StandWalkJump": "ECG",
    "UWaveGestureLibrary": "HAR",

    # datasets from UCR archive (univariate)
    "ACSF1": "DEVICE",
    "ArrowHead": "IMAGE",
    "Beef": "SPECTRO",
    "BeetleFly": "IMAGE",
    "BirdChicken": "IMAGE",
    "BME": "SIMULATED",
    "Car": "SENSOR",
    "CBF": "SIMULATED",
    "Chinatown": "Traffic",
    "Coffee": "SPECTRO",
    "Computers": "DEVICE",
    "CricketX": "MOTION",
    "CricketY": "MOTION",
    "CricketZ": "MOTION",
    "EOGHorizontalSignal": "EOG",
    "EOGVerticalSignal": "EOG",
    "FaceAll": "IMAGE",
    "Fish": "IMAGE",
    "FreezerRegularTrain": "SENSOR",
    "FreezerSmallTrain": "SENSOR",
    "GunPoint": "MOTION",
    "GunPointAgeSpan": "MOTION",
    "GunPointMaleVersusFemale": "MOTION",
    "GunPointOldVersusYoung": "MOTION",
    "Ham": "SPECTRO",
    "Haptics": "MOTION",
    "ItalyPowerDemand": "SENSOR",
    "LargeKitchenAppliances": "DEVICE",
    "Meat": "SPECTRO",
    "MoteStrain": "SENSOR",
    "PowerCons": "DEVICE",
    "RefrigerationDevices": "DEVICE",
    "Rock": "SPECTRO",
    "ScreenType": "DEVICE",
    "SemgHandGenderCh2": "SPECTRO",
    "SemgHandMovementCh2": "SPECTRO",
    "SemgHandSubjectCh2": "SPECTRO",
    "ShapeletSim": "SIMULATED",
    "ShapesAll": "IMAGE",
    "SmallKitchenAppliances": "DEVICE",
    "SmoothSubspace": "SIMULATED",
    "SonyAIBORobotSurface2": "SENSOR",
    "SwedishLeaf": "IMAGE",
    "SyntheticControl": "SIMULATED",
    "ToeSegmentation1": "MOTION",
    "ToeSegmentation2": "MOTION",
    "Trace": "SENSOR",
    "TwoLeadECG": "ECG",
    "TwoPatterns": "SIMULATED",
    "UMD": "SIMULATED",
    "UWaveGestureLibraryAll": "MOTION",
    "Wine": "SPECTRO",
    "WormsTwoClass": "MOTION",
}

datasets = list(dataset_domains.keys())

if __name__ == '__main__':
    domains = {dataset_domains[dataset] for dataset in datasets}
    print(sorted(list(domains)))
